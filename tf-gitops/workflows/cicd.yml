name: CICD for infra and frontend

env:
  package_name: terraformgitops

on:
  workflow_dispatch:
    inputs:
      environment:
        description: Environment
        required: true
        type: choice
        options:
          - 'dev'
          - 'prod'

  pull_request:
    types: [synchronize, closed, opened]
    branches:
      - dev
      - main
      
  

jobs:
  build-infra:
    runs-on: ubuntu-latest

    steps:
      - name: Git Checkout
        uses: actions/checkout@v4

      ### install Node
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      
      ### build frontend
      - name: build frontend with yarn
        run: |
          npm install -g yarn
          cd frontend
          yarn install
          yarn build

      ### install terraform
      - name: Configure Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      # check formatting
      - name: Terraform format
        run: terraform fmt -check -recursive

      ### init terraform
      - name: Terraform init
        run: terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

      ### tf plan for PRs
      - name: Terraform plan 
        if: github.event_name == 'pull_request' 
        run: terraform plan --lock=false
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

      ### apply only on PR merge
      - name: Terraform apply
        if: github.event.pull_request.merged
        run: terraform apply --auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

      ### synchronise dist dir to S3 only on merge
      - name: sync dist to S3
        if: github.event.pull_request.merged
        run: aws s3 sync ./frontend/dist s3://bijay-frontend-bucket
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

      ### setup semver bash
      - name: Setup semver bash
        run: |
          sudo curl https://raw.githubusercontent.com/fsaintjacques/semver-tool/3.0.0/src/semver -o /usr/local/bin/semver && sudo chmod +x /usr/local/bin/semver
          semver --version

      # Get version
      - name: Get version
        id: get-version
        run: |
          git fetch --tags
          package_name=${{ env.package_name }}
          last_version=$(git tag --sort=-version:refname | grep -P "^$package_name@v\d+\.\d+\.\d+$" | head -n 1 | cut -d v -f 2)

          if [ -z "$last_version" ]; then
            new_version=1.0.0
          elif [[ ${{ github.head_ref }} =~ ^"major" ]]; then
            new_version=$(semver bump major "$last_version")
          elif [[ ${{ github.head_ref }} =~ ^"feat" ]]; then
            new_version=$(semver bump minor "$last_version")
          else
            new_version=$(semver bump patch "$last_version")
          fi

          echo "new_version=$new_version" >> $GITHUB_OUTPUT

      # Prepare artifact
      - name: Prepare artifact
        id: prep
        run: |
          BUILD_NUM=$(echo $GITHUB_RUN_NUMBER)
          BUILD_ID=$(echo $GITHUB_SHA | head -c7)
          new_version=${{ steps.get-version.outputs.new_version }}

          if [[ "${{ github.event.pull_request.merged }}" == 'true' ]]; then
            VERSION="${{ env.package_name }}@v$new_version"
          else
            VERSION="${{ env.package_name }}@v$new_version+build.${BUILD_NUM}.${BUILD_ID}"
          fi

          ARTIFACT_NAME="${VERSION}.zip"
          zip -r ${ARTIFACT_NAME} *.tf
          mv ${ARTIFACT_NAME} dist.zip
          ls -al
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "artifact_name=${ARTIFACT_NAME}" >> $GITHUB_OUTPUT
      
      # Push Tag only on PR merge
      - name: Push Tag
        if: github.event.pull_request.merged
        id: tag_version
        uses: mathieudutour/github-tag-action@v5.6
        with:
          github_token: ${{ secrets.GH_TOKEN }}
          custom_tag: ${{ steps.prep.outputs.version }}
          tag_prefix: ""

      # Create release only on PR merge
      - name: Create release
        if: github.event.pull_request.merged
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GH_TOKEN }}"
          prerelease: false
          title: ${{ steps.prep.outputs.version }}
          automatic_release_tag: ${{ steps.prep.outputs.version }}
          files: |
            ${{ steps.prep.outputs.artifact_name }}

